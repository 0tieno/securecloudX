import React, { useState, useEffect } from "react";
import ReactMarkdown from "react-markdown";
import {
  Clock,
  ArrowLeft,
  Search,
  Terminal,
  Shield,
  Target,
  Zap,
  BookOpen,
} from "lucide-react";

// Helper to fetch lab files from public/labs
const LABS_PATH = "/labs/";

// List of pentesting labs and their metadata
const labFiles = [
  {
    filename: "lab-example.md",
    title: "Security Fundamentals",
    difficulty: "Beginner",
    category: "Information Gathering",
    estimatedTime: "45",
    tools: ["nmap", "dig", "whois"],
    description:
      "Learn the basics of information gathering and reconnaissance techniques",
  }
];

function extractLabMetadata(markdown) {
  const lines = markdown.split("\n");

  // Extract title from first # heading
  const title =
    lines.find((line) => line.startsWith("# "))?.replace("# ", "") ||
    "Untitled Lab";

  // Extract lab overview (first paragraph after title)
  const contentLines = lines.filter(
    (line) =>
      !line.startsWith("#") &&
      line.trim() !== "" &&
      !line.startsWith("---") &&
      !line.startsWith("##")
  );
  const overview = contentLines.slice(0, 2).join(" ").slice(0, 200) + "...";

  // Check if lab has exercises (contains ## Exercises section)
  const hasExercises =
    markdown.includes("## Exercises") || markdown.includes("## Exercise");

  return { title, overview, hasExercises };
}

const PentestingLabs = () => {
  const [labs, setLabs] = useState([]);
  const [selectedLab, setSelectedLab] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedDifficulty, setSelectedDifficulty] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");

  useEffect(() => {
    const fetchLabs = async () => {
      try {
        setLoading(true);

        const fetchedLabs = await Promise.all(
          labFiles.map(async (meta) => {
            try {
              const url = LABS_PATH + meta.filename;

              const res = await fetch(url);
              if (!res.ok) {
                console.warn(
                  `Failed to fetch ${meta.filename}: ${res.status} ${res.statusText}`
                );
                return null;
              }

              const text = await res.text();
              const { title, overview, hasExercises } =
                extractLabMetadata(text);

              return {
                ...meta,
                title: title,
                overview,
                content: text,
                hasExercises,
              };
            } catch (error) {
              console.error(`Error fetching ${meta.filename}:`, error);
              return null;
            }
          })
        );

        const validLabs = fetchedLabs.filter((lab) => lab !== null);
        setLabs(validLabs);
        setError(null);
      } catch (error) {
        console.error("Error fetching pentesting labs:", error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchLabs();
  }, []);

  const handleSelectLab = (lab) => {
    setSelectedLab(lab);
  };

  const handleBackToList = () => {
    setSelectedLab(null);
  };

  // Get unique difficulties and categories for filtering
  const difficulties = [...new Set(labs.map((lab) => lab.difficulty))];
  const categories = [...new Set(labs.map((lab) => lab.category))];

  // Filter labs based on search and filters
  const filteredLabs = labs.filter((lab) => {
    const matchesSearch =
      !searchTerm ||
      lab.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lab.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lab.tools.some((tool) =>
        tool.toLowerCase().includes(searchTerm.toLowerCase())
      );

    const matchesDifficulty =
      !selectedDifficulty || lab.difficulty === selectedDifficulty;
    const matchesCategory =
      !selectedCategory || lab.category === selectedCategory;

    return matchesSearch && matchesDifficulty && matchesCategory;
  });

  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case "Beginner":
        return "text-green-400 border-green-400";
      case "Intermediate":
        return "text-yellow-400 border-yellow-400";
      case "Advanced":
        return "text-red-400 border-red-400";
      default:
        return "text-gray-400 border-gray-400";
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="flex items-center space-x-2 text-green-400 font-mono">
          <Terminal className="w-5 h-5 animate-pulse" />
          <span>Initializing lab environment...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="text-center font-mono">
          <div className="text-red-400 text-xl mb-4">
            [ERROR] Lab initialization failed
          </div>
          <div className="text-gray-500 text-sm mb-4">{error}</div>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-gray-800 text-gray-300 font-mono hover:bg-gray-700 transition-colors border border-gray-600"
          >
            [RETRY]
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 pb-32 font-mono">
      <div className="w-full max-w-3xl mx-auto px-4 py-10">
        {!selectedLab ? (
          <>
            {/* Header */}
            <div className="mb-12">
              <div className="flex items-center mb-4">
                <Shield className="w-7 h-7 text-red-400 mr-3" />
                <h1 className="text-4xl font-bold text-gray-300">
                  pentest_labs
                </h1>
              </div>
              <p className="text-gray-500 max-w-3xl">
                // Hands-on cloud penetration testing exercises for skill
                development
              </p>
              <div className="flex items-center mt-4 text-sm text-gray-400">
                <Target className="w-4 h-4 mr-2" />
                <span>{labs.length} labs available</span>
              </div>
            </div>

            {/* Pentesting Definition Note */}
            <div className="mb-8  p-4 sm:p-6 rounded">
              <div className="text-green-400 text-xs sm:text-sm mb-2">
                $ cat what_is_cloud_pentesting.txt
              </div>
              <div className="text-gray-300 text-sm sm:text-base leading-relaxed">
                <span className="text-yellow-400">[DEFINITION]</span>{" "}
                <span className="text-cyan-400">Cloud Penetration Testing</span>{" "}
                is a specialized security assessment that simulates cyberattacks
                against{" "}
                <span className="text-blue-400">
                  cloud infrastructure, services, and applications
                </span>{" "}
                to identify exploitable vulnerabilities. It involves{" "}
                <span className="text-green-400">
                  authorized testing of cloud environments
                </span>{" "}
                including IaaS, PaaS, and SaaS platforms to discover
                misconfigurations, weak access controls, and security gaps
                before malicious actors exploit them.
              </div>
              <div className="mt-3 text-xs text-gray-400">
                # Focus: Azure, AWS, GCP security assessments and cloud-native
                vulnerability discovery
              </div>
              <div className="mt-3 text-xs text-gray-400">
                # You can contribute by creating your lab. Follow contribution guidelines.
              </div>
            </div>

            {/* Search and Filters */}
            <div className="mb-8 space-y-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 w-4 h-4" />
                <input
                  type="text"
                  placeholder="search labs, tools, techniques..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 bg-gray-800 border border-gray-700 text-gray-300 placeholder-gray-600 focus:outline-none focus:border-gray-600 font-mono"
                />
              </div>

              {/* Filter Buttons */}
              <div className="flex flex-wrap gap-2">
                <select
                  value={selectedDifficulty}
                  onChange={(e) => setSelectedDifficulty(e.target.value)}
                  className="px-3 py-2 bg-gray-800 border border-gray-700 text-gray-300 font-mono text-sm focus:outline-none focus:border-gray-600"
                >
                  <option value="">All Difficulties</option>
                  {difficulties.map((diff) => (
                    <option key={diff} value={diff}>
                      {diff}
                    </option>
                  ))}
                </select>

                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-3 py-2 bg-gray-800 border border-gray-700 text-gray-300 font-mono text-sm focus:outline-none focus:border-gray-600"
                >
                  <option value="">All Categories</option>
                  {categories.map((cat) => (
                    <option key={cat} value={cat}>
                      {cat}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Labs Grid */}
            {filteredLabs.length === 0 ? (
              <div className="text-center py-12">
                <p className="text-gray-500 font-mono">
                  {labs.length === 0
                    ? "// no labs found in environment"
                    : "// no labs match current filters"}
                </p>
              </div>
            ) : (
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {filteredLabs.map((lab) => (
                  <article
                    key={lab.filename}
                    className="bg-gray-800 border border-gray-700 p-6 hover:border-gray-600 transition-colors cursor-pointer group relative"
                    onClick={() => handleSelectLab(lab)}
                  >
                    <div className="flex flex-col h-full">
                      <header className="mb-4">
                        <div className="flex items-start justify-between mb-2">
                          <div
                            className={`px-2 py-1 border text-xs font-mono ${getDifficultyColor(
                              lab.difficulty
                            )}`}
                          >
                            {lab.difficulty.toUpperCase()}
                          </div>
                        </div>

                        <h2 className="text-lg text-gray-300 mb-2 group-hover:text-gray-200 transition-colors">
                          {lab.title}
                        </h2>

                        <div className="text-sm text-gray-500 mb-3">
                          <span className="text-cyan-400">{lab.category}</span>
                        </div>

                        <div className="flex items-center text-xs text-gray-500 space-x-4 mb-3">
                          <div className="flex items-center">
                            <Clock className="w-3 h-3 mr-1" />
                            {lab.estimatedTime}m
                          </div>
                          <div className="flex items-center">
                            <Zap className="w-3 h-3 mr-1" />
                            {lab.tools.length} tools
                          </div>
                          {lab.hasExercises && (
                            <div className="flex items-center">
                              <BookOpen className="w-3 h-3 mr-1" />
                              exercises
                            </div>
                          )}
                        </div>
                      </header>

                      <p className="text-gray-400 mb-4 leading-relaxed text-sm flex-1">
                        {lab.description}
                      </p>

                      {/* Tools List */}
                      <div className="mb-4">
                        <div className="flex flex-wrap gap-1">
                          {lab.tools.slice(0, 3).map((tool) => (
                            <span
                              key={tool}
                              className="px-2 py-1 bg-gray-900 text-green-400 text-xs font-mono border border-gray-700"
                            >
                              {tool}
                            </span>
                          ))}
                          {lab.tools.length > 3 && (
                            <span className="px-2 py-1 bg-gray-900 text-gray-500 text-xs font-mono border border-gray-700">
                              +{lab.tools.length - 3}
                            </span>
                          )}
                        </div>
                      </div>

                      <footer>
                        <span className="text-red-400 text-sm hover:text-red-300 transition-colors">
                          ./start_lab.sh →
                        </span>
                      </footer>
                    </div>
                  </article>
                ))}
              </div>
            )}
          </>
        ) : (
          /* Single Lab View */
          <div className="w-full max-w-4xl mx-auto">
            <button
              onClick={handleBackToList}
              className="mb-8 inline-flex items-center text-red-400 hover:text-red-300 transition-colors group font-mono"
            >
              <ArrowLeft className="w-4 h-4 mr-2 group-hover:-translate-x-1 transition-transform" />
              cd ../labs
            </button>

            <article className="p-8">
              <header className="mb-8 pb-6 border-b border-gray-700">
                <div className="flex items-center mb-4">
                  <div
                    className={`px-3 py-1 border text-sm font-mono ${getDifficultyColor(
                      selectedLab.difficulty
                    )}`}
                  >
                    {selectedLab.difficulty.toUpperCase()}
                  </div>
                </div>

                <h1 className="text-3xl text-gray-300 mb-4">
                  {selectedLab.title}
                </h1>

                <div className="flex flex-wrap items-center text-gray-500 gap-6 text-sm mb-4">
                  <div className="flex items-center">
                    <Target className="w-4 h-4 mr-2" />
                    {selectedLab.category}
                  </div>
                  <div className="flex items-center">
                    <Clock className="w-4 h-4 mr-2" />
                    {selectedLab.estimatedTime}m estimated
                  </div>
                  <div className="flex items-center">
                    <Zap className="w-4 h-4 mr-2" />
                    {selectedLab.tools.length} tools required
                  </div>
                </div>

                {/* Tools Required */}
                <div className="mb-4">
                  <span className="text-gray-400 text-sm mr-2">Tools:</span>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {selectedLab.tools.map((tool) => (
                      <span
                        key={tool}
                        className="px-3 py-1 bg-gray-900 text-green-400 text-sm font-mono border border-gray-700"
                      >
                        {tool}
                      </span>
                    ))}
                  </div>
                </div>
              </header>

              <div className="prose prose-invert max-w-none text-gray-400 leading-relaxed">
                <ReactMarkdown
                  components={{
                    h1: ({ node, ...props }) => (
                      <h1
                        className="text-2xl text-gray-300 mb-6 mt-8 font-mono"
                        {...props}
                      />
                    ),
                    h2: ({ node, ...props }) => (
                      <h2
                        className="text-xl text-gray-300 mb-4 mt-6 font-mono border-b border-gray-700 pb-2"
                        {...props}
                      />
                    ),
                    h3: ({ node, ...props }) => (
                      <h3
                        className="text-lg text-gray-300 mb-3 mt-5 font-mono"
                        {...props}
                      />
                    ),
                    p: ({ node, ...props }) => (
                      <p
                        className="text-gray-400 mb-4 leading-relaxed"
                        {...props}
                      />
                    ),
                    strong: ({ node, ...props }) => (
                      <strong className="text-red-300 font-bold" {...props} />
                    ),
                    em: ({ node, ...props }) => (
                      <em className="text-yellow-300 italic" {...props} />
                    ),
                    code: ({ node, inline, ...props }) =>
                      inline ? (
                        <code
                          className="bg-gray-900 px-2 py-1 text-green-400 text-sm font-mono border border-gray-700"
                          {...props}
                        />
                      ) : (
                        <code
                          className="block bg-gray-900 p-4 text-green-400 text-sm overflow-x-auto font-mono border border-gray-700"
                          {...props}
                        />
                      ),
                    pre: ({ node, ...props }) => (
                      <pre
                        className="bg-gray-900 p-4 overflow-x-auto mb-4 border border-gray-700"
                        {...props}
                      />
                    ),
                    blockquote: ({ node, ...props }) => (
                      <blockquote
                        className="border-l-4 border-red-500 bg-red-900/20 pl-6 pr-4 py-4 my-6 text-red-300 font-mono relative before:content-['⚠️'] before:absolute before:left-2 before:text-red-400"
                        {...props}
                      />
                    ),
                    ul: ({ node, ...props }) => (
                      <ul
                        className="list-disc list-inside text-gray-400 mb-4 space-y-1"
                        {...props}
                      />
                    ),
                    ol: ({ node, ...props }) => (
                      <ol
                        className="list-decimal list-inside text-gray-400 mb-4 space-y-1"
                        {...props}
                      />
                    ),
                    li: ({ node, ...props }) => (
                      <li className="text-gray-400" {...props} />
                    ),
                    a: ({ node, ...props }) => (
                      <a
                        className="text-red-400 hover:text-red-300 underline transition-colors"
                        {...props}
                      />
                    ),
                  }}
                >
                  {selectedLab.content}
                </ReactMarkdown>
              </div>
            </article>
          </div>
        )}
      </div>

      {/* Footer */}
      <footer className="fixed bottom-0 left-0 w-full bg-gray-900 border-t border-gray-700 z-50 font-mono">
        <div className="w-full max-w-6xl mx-auto px-4 py-3">
          <div className="hidden md:flex items-center justify-between">
            <div className="text-gray-500 text-sm">
              root@pentest-lab:~# whoami
            </div>
            <div className="text-gray-500 text-sm">
              penetration tester | security researcher | open source advocate
            </div>
            <div className="flex items-center space-x-4 text-sm">
              <a
                href="mailto:securecloudx.learn@gmail.com"
                className="text-red-400 hover:text-red-300 transition-colors"
              >
                contact
              </a>
              <a
                href="http://github.com/securecloudx"
                className="text-red-400 hover:text-red-300 transition-colors"
              >
                github
              </a>
              <a
                href="http://github.com/securecloudx"
                className="text-red-400 hover:text-red-300 transition-colors"
              >
                contribute
              </a>
            </div>
          </div>

          <div className="md:hidden space-y-2">
            <div className="flex items-center space-x-4 text-xs">
              <a
                href="mailto:securecloudx.learn@gmail.com"
                className="text-red-400 hover:text-red-300 transition-colors"
              >
                contact
              </a>
              <a
                href="http://github.com/securecloudx"
                className="text-red-400 hover:text-red-300 transition-colors"
              >
                github
              </a>
            </div>
            <div className="text-gray-500 text-xs">
              root@pentest-lab:~# whoami
            </div>
            <div className="text-gray-500 text-xs">
              penetration tester | security researcher
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default PentestingLabs;
